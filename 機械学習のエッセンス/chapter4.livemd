<!-- livebook:{"persist_outputs":true} -->

# 機械学習のエッセンス

```elixir
Mix.install([
  {:nx, "~> 0.2"},
  {:kino_vega_lite, "~> 0.1.1"}
])
```

<!-- livebook:{"output":true} -->

```
Resolving Hex dependencies...
Dependency resolution completed:
New:
  complex 0.4.1
  kino 0.6.1
  kino_vega_lite 0.1.1
  nx 0.2.1
  table 0.1.1
  vega_lite 0.1.4
* Getting nx (Hex package)
* Getting kino_vega_lite (Hex package)
* Getting kino (Hex package)
* Getting table (Hex package)
* Getting vega_lite (Hex package)
* Getting complex (Hex package)
==> table
Compiling 3 files (.ex)
Generated table app
==> kino
Compiling 27 files (.ex)
Generated kino app
==> vega_lite
Compiling 5 files (.ex)
Generated vega_lite app
==> complex
Compiling 2 files (.ex)
Generated complex app
==> nx
Compiling 24 files (.ex)
Generated nx app
==> kino_vega_lite
Compiling 4 files (.ex)
Generated kino_vega_lite app
```

<!-- livebook:{"output":true} -->

```
:ok
```

## 2章グラフの表示

```elixir
alias VegaLite, as: Vl
x = Nx.iota({11}) |> Nx.subtract(5) |> Nx.to_flat_list()
y = Nx.tensor(x) |> Nx.power(2) |> Nx.to_flat_list()

Vl.new(width: 400, height: 200)
|> Vl.data_from_values(x: x, y: y)
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"x":-5,"y":25},{"x":-4,"y":16},{"x":-3,"y":9},{"x":-2,"y":4},{"x":-1,"y":1},{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25}]},"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"height":200,"mark":"line","width":400}
```

## 04-02 NumPyの基本

```elixir
# Np.exp(2)
Nx.exp(2)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  7.389056205749512
>
```

```elixir
# np.log(np.e)
Nx.exp(1) |> Nx.log()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  0.9999999403953552
>
```

```elixir
# np.sin(np.pi)
:math.pi() |> Nx.sin() |> IO.inspect()
:math.pi() |> :math.sin() |> Nx.tensor()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  -8.742277657347586e-8
>
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  1.2246468525851679e-16
>
```

```elixir
# np.sqrt(3)
Nx.sqrt(3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  1.7320507764816284
>
```

## NumPyの配列

```elixir
# a = np.array([2,3,5,7,8])
a = Nx.tensor([2, 3, 5, 7, 8])
a[0]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  2
>
```

```elixir
# a[1:3]
a[1..2]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [3, 5]
>
```

```elixir
# a[2:-1]
a[2..-2//1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [5, 7]
>
```

```elixir
# b = np.arange(5)
b = Nx.iota({5})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 1, 2, 3, 4]
>
```

```elixir
# np.arange(1,3,0.2)
c = Nx.iota({10}) |> Nx.multiply(0.2) |> Nx.add(1)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[10]
  [1.0, 1.2000000476837158, 1.399999976158142, 1.600000023841858, 1.7999999523162842, 2.0, 2.200000047683716, 2.4000000953674316, 2.5999999046325684, 2.8000001907348633]
>
```

```elixir
Nx.type(a)
```

<!-- livebook:{"output":true} -->

```
{:s, 64}
```

```elixir
Nx.tensor([1, 2, 4], type: :s64)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [1, 2, 4]
>
```

## ２次元配列

```elixir
# a = np.array([[2, 3, 4], [5 ,6, 7]], dtype=np.float64)
a = Nx.tensor([[2, 3, 4], [5, 6, 7]])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2][3]
  [
    [2, 3, 4],
    [5, 6, 7]
  ]
>
```

```elixir
# a[0, 1]
a[0][1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  3
>
```

```elixir
# a[:, 1]
a[[0..-1//1, 1]]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [3, 6]
>
```

```elixir
# a[1, :]
a[1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [5, 6, 7]
>
```

```elixir
# a[0, 2:]
a[0][2..-1//1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1]
  [4]
>
```

```elixir
# a[0, :2]
a[0][0..1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [2, 3]
>
```

## 配列のデータ属性

```elixir
# a = np.arange(15.).reshape(3, 5)
a = Nx.iota({15}) |> Nx.reshape({3, 5})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][5]
  [
    [0, 1, 2, 3, 4],
    [5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14]
  ]
>
```

```elixir
# a.shape
Nx.shape(a)
```

<!-- livebook:{"output":true} -->

```
{3, 5}
```

```elixir
# a.ndim
Nx.rank(a)
```

<!-- livebook:{"output":true} -->

```
2
```

```elixir
# a.size
Nx.size(a)
```

<!-- livebook:{"output":true} -->

```
15
```

```elixir
# b = np.arange(4.)
b = Nx.iota({4})
# b.shape
b |> Nx.shape() |> IO.inspect()
# b.ndim
b |> Nx.rank() |> IO.inspect()
# b.size
b |> Nx.size() |> IO.inspect()
```

<!-- livebook:{"output":true} -->

```
{4}
1
4
```

<!-- livebook:{"output":true} -->

```
4
```

## reshapeメソッドと形状の変更

```elixir
# a = np.arange(16.)
# c = a.reshape(4, -1)
a = Nx.iota({16})
c = Nx.reshape(a, {4, 4})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][4]
  [
    [0, 1, 2, 3],
    [4, 5, 6, 7],
    [8, 9, 10, 11],
    [12, 13, 14, 15]
  ]
>
```

```elixir
# c.ravel()
Nx.flatten(c)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[16]
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
>
```

```elixir
# b = np.arange(4.)
b = Nx.iota({4})
Nx.reshape(b, {4, 1}) |> IO.inspect()
b |> Nx.new_axis(0) |> Nx.transpose()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][1]
  [
    [0],
    [1],
    [2],
    [3]
  ]
>
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][1]
  [
    [0],
    [1],
    [2],
    [3]
  ]
>
```

## その他の配列操作

```elixir
# a = np.zeros((3,4))
Nx.random_normal({3, 4}, 0.0, 0.0)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][4]
  [
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0]
  ]
>
```

```elixir
# b = np.ones((2,2))
Nx.random_normal({2, 2}, 1.0, 0.0)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[2][2]
  [
    [1.0, 1.0],
    [1.0, 1.0]
  ]
>
```

```elixir
# c = np.empty((2, 5))
Nx.random_normal({2, 5})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[2][5]
  [
    [0.988588809967041, -1.1164922714233398, 0.31241413950920105, -0.15709801018238068, 0.8790153861045837],
    [-1.465154767036438, 0.021299956366419792, -0.09117002040147781, -0.628290057182312, -0.283886581659317]
  ]
>
```

## 行列の連結

```elixir
a = Nx.iota({2, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2][3]
  [
    [0, 1, 2],
    [3, 4, 5]
  ]
>
```

```elixir
b = Nx.iota({2, 3}) |> Nx.add(6)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2][3]
  [
    [6, 7, 8],
    [9, 10, 11]
  ]
>
```

```elixir
# 縦方向
Nx.concatenate([a, b])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [9, 10, 11]
  ]
>
```

```elixir
# 横方向
Nx.concatenate([a, b], axis: 1)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2][6]
  [
    [0, 1, 2, 6, 7, 8],
    [3, 4, 5, 9, 10, 11]
  ]
>
```

```elixir
c = Nx.iota({3})
d = Nx.iota({3}) |> Nx.add(3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [3, 4, 5]
>
```

```elixir
Nx.concatenate([c, d])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[6]
  [0, 1, 2, 3, 4, 5]
>
```

```elixir
Nx.concatenate([a, c])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 1, 2, 3, 4]
>
```

```elixir
c = Nx.new_axis(c, 0)
Nx.concatenate([a, c])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [0, 1, 2]
  ]
>
```

## 04-03 配列操作の基本

```elixir
a = Nx.iota({5})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 1, 2, 3, 4]
>
```

```elixir
Nx.sum(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  10
>
```

```elixir
Nx.mean(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  2.0
>
```

```elixir
Nx.reduce_max(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  4
>
```

```elixir
Nx.reduce_min(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  0
>
```

## ２次元配列の合計

```elixir
b = Nx.iota({3, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
  ]
>
```

```elixir
Nx.sum(b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  36
>
```

```elixir
Nx.sum(b, axes: [0])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [9, 12, 15]
>
```

```elixir
Nx.sum(b, axes: [1])
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [3, 12, 21]
>
```

## ブロードキャスト

```elixir
a = Nx.iota({5}) |> Nx.add(3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [3, 4, 5, 6, 7]
>
```

```elixir
Nx.exp(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[5]
  [20.08553695678711, 54.598148345947266, 148.4131622314453, 403.4288024902344, 1096.6331787109375]
>
```

```elixir
Nx.log(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[5]
  [1.0986123085021973, 1.3862943649291992, 1.6094379425048828, 1.7917594909667969, 1.945910096168518]
>
```

```elixir
Nx.sqrt(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[5]
  [1.7320507764816284, 2.0, 2.2360680103302, 2.4494898319244385, 2.6457512378692627]
>
```

```elixir
b = Nx.iota({3, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
  ]
>
```

```elixir
Nx.exp(b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][3]
  [
    [1.0, 2.7182817459106445, 7.389056205749512],
    [20.08553695678711, 54.598148345947266, 148.4131622314453],
    [403.4288024902344, 1096.6331787109375, 2980.9580078125]
  ]
>
```

## 配列とスカラの演算

```elixir
a = Nx.iota({5})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 1, 2, 3, 4]
>
```

```elixir
Nx.add(a, 3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [3, 4, 5, 6, 7]
>
```

```elixir
Nx.multiply(a, 3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 3, 6, 9, 12]
>
```

```elixir
Nx.power(a, 2)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[5]
  [0, 1, 4, 9, 16]
>
```

```elixir
Nx.greater_equal(a, 2)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[5]
  [0, 0, 1, 1, 1]
>
```

```elixir
Nx.not_equal(a, 3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[5]
  [1, 1, 1, 0, 1]
>
```

```elixir
b = Nx.iota({3, 3})
Nx.greater(b, 3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[3][3]
  [
    [0, 0, 0],
    [0, 1, 1],
    [1, 1, 1]
  ]
>
```

## ブール値を要素として持つ配列の演算

```elixir
a = Nx.tensor([10, 20, 30, 40])
b = Nx.tensor([0, 1, 1, 0])
Nx.multiply(a, b) |> Nx.to_flat_list() |> Enum.reject(&(&1 == 0)) |> Nx.tensor()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[2]
  [20, 30]
>
```

## 条件を指定した要素の抽出

## 配列の演算

```elixir
u = Nx.iota({4})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4]
  [0, 1, 2, 3]
>
```

```elixir
v = Nx.iota({4}) |> Nx.add(3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4]
  [3, 4, 5, 6]
>
```

```elixir
Nx.add(u, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4]
  [3, 5, 7, 9]
>
```

```elixir
Nx.subtract(u, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4]
  [-3, -3, -3, -3]
>
```

```elixir
Nx.multiply(u, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4]
  [0, 4, 10, 18]
>
```

```elixir
Nx.dot(u, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  32
>
```

```elixir
Nx.multiply(u, v) |> Nx.sum()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  32
>
```

## ２次元配列の演算

```elixir
a = Nx.iota({3, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
  ]
>
```

```elixir
b = Nx.iota({3, 3}) |> Nx.add(4)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [4, 5, 6],
    [7, 8, 9],
    [10, 11, 12]
  ]
>
```

```elixir
Nx.add(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [4, 6, 8],
    [10, 12, 14],
    [16, 18, 20]
  ]
>
```

```elixir
Nx.subtract(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [-4, -4, -4],
    [-4, -4, -4],
    [-4, -4, -4]
  ]
>
```

```elixir
Nx.multiply(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 5, 12],
    [21, 32, 45],
    [60, 77, 96]
  ]
>
```

```elixir
Nx.divide(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][3]
  [
    [0.0, 0.20000000298023224, 0.3333333432674408],
    [0.4285714328289032, 0.5, 0.5555555820465088],
    [0.6000000238418579, 0.6363636255264282, 0.6666666865348816]
  ]
>
```

```elixir
Nx.dot(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [27, 30, 33],
    [90, 102, 114],
    [153, 174, 195]
  ]
>
```

## 形状の違う行列の積

```elixir
a = Nx.iota({3, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
  ]
>
```

```elixir
v = Nx.iota({3}) |> Nx.add(1)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [1, 2, 3]
>
```

```elixir
Nx.dot(a, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [8, 26, 44]
>
```

```elixir
Nx.dot(v, a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3]
  [24, 30, 36]
>
```

```elixir
u = Nx.new_axis(v, 0) |> Nx.transpose()
Nx.dot(a, u)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][1]
  [
    [8],
    [26],
    [44]
  ]
>
```

```elixir
# error
Nx.dot(u, a)
```

```elixir
w = Nx.new_axis(v, 0)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1][3]
  [
    [1, 2, 3]
  ]
>
```

```elixir
Nx.dot(w, a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1][3]
  [
    [24, 30, 36]
  ]
>
```

## 配列同士の演算におけるブロードキャスト

```elixir
a = Nx.iota({4, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [9, 10, 11]
  ]
>
```

```elixir
b = Nx.iota({1, 3})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1][3]
  [
    [0, 1, 2]
  ]
>
```

```elixir
c = Nx.iota({4, 1})
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][1]
  [
    [0],
    [1],
    [2],
    [3]
  ]
>
```

```elixir
Nx.add(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 2, 4],
    [3, 5, 7],
    [6, 8, 10],
    [9, 11, 13]
  ]
>
```

```elixir
Nx.multiply(a, c)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 0, 0],
    [3, 4, 5],
    [12, 14, 16],
    [27, 30, 33]
  ]
>
```

```elixir
Nx.subtract(b, c)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 1, 2],
    [-1, 0, 1],
    [-2, -1, 0],
    [-3, -2, -1]
  ]
>
```

## ２次元配列と１次元配列の演算

```elixir
a = Nx.iota({4, 3})
v = Nx.iota({3})
Nx.add(a, v)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[4][3]
  [
    [0, 2, 4],
    [3, 5, 7],
    [6, 8, 10],
    [9, 11, 13]
  ]
>
```

## 04-04疎行列 None

## 04-05 Numpy/SciPyによる線形代数

## 逆行列を求める

```elixir
a = Nx.tensor([[3, 1, 1], [1, 2, 1], [0, -1, 1]])
Nx.LinAlg.invert(a)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][3]
  [
    [0.4285714328289032, -0.2857142686843872, -0.1428571343421936],
    [-0.1428571343421936, 0.4285714328289032, -0.2857142686843872],
    [-0.1428571343421936, 0.4285714030265808, 0.714285671710968]
  ]
>
```

## slove関数を使う

```elixir
a = Nx.tensor([[3, 1, 1], [1, 2, 1], [0, -1, 1]])
b = Nx.tensor([1, 2, 3])
Nx.LinAlg.solve(a, b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3]
  [-0.5714285373687744, -0.14285710453987122, 2.857142686843872]
>
```

## LU分解により連立方程式を解く

```elixir
a = Nx.tensor([[3, 1, 1], [1, 2, 1], [0, -1, 1]])
b = Nx.tensor([1, 2, 3])
{_p, l, u} = Nx.LinAlg.lu(a)
Nx.dot(l, u) |> Nx.LinAlg.solve(b)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3]
  [-0.5714285969734192, -0.1428571492433548, 2.857142925262451]
>
```

## 04-06 乱数

## numpy.randomモジュールを使う

```elixir
Nx.random_uniform({1}, 0.0, 1.0)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[1]
  [0.8124809265136719]
>
```

```elixir
Nx.random_uniform({3, 2}, 0.0, 1.0)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][2]
  [
    [0.2630559206008911, 0.25519537925720215],
    [0.27700310945510864, 0.6612704992294312],
    [0.7533888816833496, 0.4644715189933777]
  ]
>
```

```elixir
Nx.random_uniform({1}, 0, 4)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1]
  [3]
>
```

```elixir
Nx.random_uniform({1}, 10, 20)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[1]
  [15]
>
```

```elixir
Nx.random_uniform({3, 3}, 0, 5)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[3][3]
  [
    [3, 3, 3],
    [1, 3, 3],
    [3, 3, 2]
  ]
>
```

## 乱数の種を指定する None

## 04-07 データの可視化

## 折れ線グラフ

```elixir
x = [0, 1, 2, 3]
y = [3, 7, 4, 8]

Vl.new(width: 400, height: 200)
|> Vl.data_from_values(x: x, y: y)
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"x":0,"y":3},{"x":1,"y":7},{"x":2,"y":4},{"x":3,"y":8}]},"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"height":200,"mark":"line","width":400}
```

## 散布図

```elixir
x = [0, 1, 2, 3]
y = [3, 7, 4, 8]

Vl.new(width: 400, height: 200)
|> Vl.data_from_values(x: x, y: y)
|> Vl.mark(:point)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"x":0,"y":3},{"x":1,"y":7},{"x":2,"y":4},{"x":3,"y":8}]},"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"height":200,"mark":"point","width":400}
```

## 曲線のグラフ

```elixir
# np.linspace(-5, 5, 300)
x = Nx.iota({1, 300}) |> Nx.multiply(10 / 300) |> Nx.subtract(5)
y = Nx.power(x, 2)

Vl.new(width: 400, height: 200)
|> Vl.data_from_values(x: Nx.to_flat_list(x), y: Nx.to_flat_list(y))
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"x":-5.0,"y":25.0},{"x":-4.9666666984558105,"y":24.66777801513672},{"x":-4.933333396911621,"y":24.337778091430664},{"x":-4.900000095367432,"y":24.010000228881836},{"x":-4.866666793823242,"y":23.684446334838867},{"x":-4.833333492279053,"y":23.361112594604492},{"x":-4.800000190734863,"y":23.040000915527344},{"x":-4.766666412353516,"y":22.72110939025879},{"x":-4.733333110809326,"y":22.404441833496094},{"x":-4.699999809265137,"y":22.089998245239258},{"x":-4.666666507720947,"y":21.77777671813965},{"x":-4.633333206176758,"y":21.467777252197266},{"x":-4.599999904632568,"y":21.15999984741211},{"x":-4.566666603088379,"y":20.85444450378418},{"x":-4.5333333015441895,"y":20.551111221313477},{"x":-4.5,"y":20.25},{"x":-4.4666666984558105,"y":19.95111083984375},{"x":-4.433333396911621,"y":19.65444564819336},{"x":-4.400000095367432,"y":19.360000610351562},{"x":-4.366666793823242,"y":19.067779541015625},{"x":-4.333333492279053,"y":18.77777862548828},{"x":-4.300000190734863,"y":18.490001678466797},{"x":-4.266666412353516,"y":18.204442977905273},{"x":-4.233333110809326,"y":17.921110153198242},{"x":-4.199999809265137,"y":17.639997482299805},{"x":-4.166666507720947,"y":17.36111068725586},{"x":-4.133333206176758,"y":17.084444046020508},{"x":-4.099999904632568,"y":16.809999465942383},{"x":-4.066666603088379,"y":16.537776947021484},{"x":-4.0333333015441895,"y":16.267778396606445},{"x":-4.0,"y":16.0},{"x":-3.9666666984558105,"y":15.734444618225098},{"x":-3.933333396911621,"y":15.471111297607422},{"x":-3.9000000953674316,"y":15.210000991821289},{"x":-3.866666555404663,"y":14.951109886169434},{"x":-3.8333332538604736,"y":14.694443702697754},{"x":-3.799999952316284,"y":14.4399995803833},{"x":-3.7666666507720947,"y":14.187777519226074},{"x":-3.733333110809326,"y":13.937776565551758},{"x":-3.6999998092651367,"y":13.689998626708984},{"x":-3.6666665077209473,"y":13.444443702697754},{"x":-3.633333206176758,"y":13.201109886169434},{"x":-3.5999999046325684,"y":12.959999084472656},{"x":-3.566666603088379,"y":12.721110343933105},{"x":-3.5333333015441895,"y":12.484444618225098},{"x":-3.5,"y":12.25},{"x":-3.4666666984558105,"y":12.017778396606445},{"x":-3.433333396911621,"y":11.7877779006958},{"x":-3.3999998569488525,"y":11.559999465942383},{"x":-3.366666555404663,"y":11.334444046020508},{"x":-3.3333332538604736,"y":11.11111068725586},{"x":-3.299999952316284,"y":10.889999389648438},{"x":-3.2666664123535156,"y":10.671109199523926},{"x":-3.233333110809326,"y":10.454442977905273},{"x":-3.1999998092651367,"y":10.239998817443848},{"x":-3.1666665077209473,"y":10.027776718139648},{"x":-3.133333206176758,"y":9.817776679992676},{"x":-3.0999999046325684,"y":9.609999656677246},{"x":-3.066666603088379,"y":9.404443740844727},{"x":-3.0333333015441895,"y":9.20111083984375},{"x":-3.0,"y":9.0},{"x":-2.9666664600372314,"y":8.80111026763916},{"x":-2.933333158493042,"y":8.604443550109863},{"x":-2.8999998569488525,"y":8.409998893737793},{"x":-2.866666555404663,"y":8.217777252197266},{"x":-2.8333332538604736,"y":8.027777671813965},{"x":-2.799999952316284,"y":7.839999675750732},{"x":-2.7666666507720947,"y":7.654444217681885},{"x":-2.733333110809326,"y":7.471109867095947},{"x":-2.6999998092651367,"y":7.289999008178711},{"x":-2.6666665077209473,"y":7.111110210418701},{"x":-2.633333206176758,"y":6.934443950653076},{"x":-2.5999999046325684,"y":6.7599992752075195},{"x":-2.566666603088379,"y":6.587777614593506},{"x":-2.5333333015441895,"y":6.4177775382995605},{"x":-2.499999761581421,"y":6.249999046325684},{"x":-2.4666664600372314,"y":6.08444356918335},{"x":-2.433333158493042,"y":5.921110153198242},{"x":-2.3999998569488525,"y":5.7599992752075195},{"x":-2.366666555404663,"y":5.601110458374023},{"x":-2.3333332538604736,"y":5.444444179534912},{"x":-2.299999952316284,"y":5.289999961853027},{"x":-2.2666664123535156,"y":5.137776851654053},{"x":-2.233333110809326,"y":4.987776756286621},{"x":-2.1999998092651367,"y":4.839999198913574},{"x":-2.1666665077209473,"y":4.694443702697754},{"x":-2.133333206176758,"y":4.551110744476318},{"x":-2.0999999046325684,"y":4.409999370574951},{"x":-2.066666603088379,"y":4.271111011505127},{"x":-2.0333330631256104,"y":4.134443283081055},{"x":-1.999999761581421,"y":3.9999990463256836},{"x":-1.9666664600372314,"y":3.867776870727539},{"x":-1.933333158493042,"y":3.7377769947052},{"x":-1.8999998569488525,"y":3.609999418258667},{"x":-1.866666555404663,"y":3.4844441413879395},{"x":-1.8333332538604736,"y":3.3611109256744385},{"x":-1.799999713897705,"y":3.2399990558624268},{"x":-1.7666664123535156,"y":3.121110200881958},{"x":-1.7333331108093262,"y":3.004443645477295},{"x":-1.6999998092651367,"y":2.8899993896484375},{"x":-1.6666665077209473,"y":2.7777771949768066},{"x":-1.6333332061767578,"y":2.6677772998809814},{"x":-1.5999999046325684,"y":2.559999704360962},{"x":-1.566666603088379,"y":2.454444169998169},{"x":-1.5333330631256104,"y":2.3511102199554443},{"x":-1.499999761581421,"y":2.2499992847442627},{"x":-1.4666664600372314,"y":2.1511104106903076},{"x":-1.433333158493042,"y":2.054443836212158},{"x":-1.3999998569488525,"y":1.9599995613098145},{"x":-1.366666555404663,"y":1.8677774667739868},{"x":-1.3333332538604736,"y":1.7777775526046753},{"x":-1.299999713897705,"y":1.6899992227554321},{"x":-1.2666664123535156,"y":1.6044437885284424},{"x":-1.2333331108093262,"y":1.5211105346679688},{"x":-1.1999998092651367,"y":1.4399995803833008},{"x":-1.1666665077209473,"y":1.3611106872558594},{"x":-1.1333332061767578,"y":1.2844442129135132},{"x":-1.0999999046325684,"y":1.2099997997283936},{"x":-1.0666663646697998,"y":1.1377770900726318},{"x":-1.0333330631256104,"y":1.0677772760391235},{"x":-1.0,"y":1.0},{"x":-0.9666662216186523,"y":0.9344435930252075},{"x":-0.9333329200744629,"y":0.8711103200912476},{"x":-0.8999996185302734,"y":0.8099992871284485},{"x":-0.866666316986084,"y":0.7511104941368103},{"x":-0.8333330154418945,"y":0.694443941116333},{"x":-0.7999997138977051,"y":0.6399995684623718},{"x":-0.7666664123535156,"y":0.5877773761749268},{"x":-0.7333331108093262,"y":0.5377774238586426},{"x":-0.6999998092651367,"y":0.4899997413158417},{"x":-0.6666665077209473,"y":0.4444442391395569},{"x":-0.6333332061767578,"y":0.4011109471321106},{"x":-0.5999999046325684,"y":0.3599998950958252},{"x":-0.5666666030883789,"y":0.3211110532283783},{"x":-0.5333333015441895,"y":0.2844444215297699},{"x":-0.5,"y":0.25},{"x":-0.46666622161865234,"y":0.21777735650539398},{"x":-0.4333329200744629,"y":0.18777741491794586},{"x":-0.39999961853027344,"y":0.15999969840049744},{"x":-0.366666316986084,"y":0.1344441920518875},{"x":-0.33333301544189453,"y":0.11111089587211609},{"x":-0.2999997138977051,"y":0.08999982476234436},{"x":-0.2666664123535156,"y":0.07111097872257233},{"x":-0.23333311080932617,"y":0.054444339126348495},{"x":-0.19999980926513672,"y":0.03999992460012436},{"x":-0.16666650772094727,"y":0.027777723968029022},{"x":-0.1333332061767578,"y":0.01777774468064308},{"x":-0.09999990463256836,"y":0.00999998115003109},{"x":-0.0666666030883789,"y":0.00444443617016077},{"x":-0.03333330154418945,"y":0.0011111090425401926},{"x":4.76837158203125e-7,"y":2.2737367544323206e-13},{"x":0.033333778381347656,"y":0.0011111408239230514},{"x":0.06666707992553711,"y":0.004444499500095844},{"x":0.10000038146972656,"y":0.0100000761449337},{"x":0.13333368301391602,"y":0.01777787134051323},{"x":0.16666698455810547,"y":0.027777884155511856},{"x":0.20000028610229492,"y":0.04000011458992958},{"x":0.23333358764648438,"y":0.0544445626437664},{"x":0.26666688919067383,"y":0.07111123204231262},{"x":0.3000001907348633,"y":0.09000011533498764},{"x":0.33333349227905273,"y":0.11111121624708176},{"x":0.3666667938232422,"y":0.13444453477859497},{"x":0.40000009536743164,"y":0.16000007092952728},{"x":0.4333333969116211,"y":0.1877778321504593},{"x":0.46666717529296875,"y":0.2177782505750656},{"x":0.5000004768371582,"y":0.2500004768371582},{"x":0.5333337783813477,"y":0.2844449281692505},{"x":0.5666670799255371,"y":0.3211115896701813},{"x":0.6000003814697266,"y":0.36000046133995056},{"x":0.633333683013916,"y":0.40111154317855835},{"x":0.6666669845581055,"y":0.444444864988327},{"x":0.7000002861022949,"y":0.4900003969669342},{"x":0.7333335876464844,"y":0.5377781391143799},{"x":0.7666668891906738,"y":0.5877780914306641},{"x":0.8000001907348633,"y":0.6400002837181091},{"x":0.8333334922790527,"y":0.6944447159767151},{"x":0.8666667938232422,"y":0.7511113286018372},{"x":0.9000000953674316,"y":0.8100001811981201},{"x":0.9333338737487793,"y":0.8711121082305908},{"x":0.9666671752929688,"y":0.9344454407691956},{"x":1.0000004768371582,"y":1.0000009536743164},{"x":1.0333337783813477,"y":1.0677787065505981},{"x":1.066667079925537,"y":1.137778639793396},{"x":1.1000003814697266,"y":1.2100008726119995},{"x":1.133333683013916,"y":1.2844452857971191},{"x":1.1666669845581055,"y":1.3611118793487549},{"x":1.200000286102295,"y":1.4400006532669067},{"x":1.2333335876464844,"y":1.5211117267608643},{"x":1.2666668891906738,"y":1.604444980621338},{"x":1.3000001907348633,"y":1.6900005340576172},{"x":1.3333334922790527,"y":1.777778148651123},{"x":1.3666667938232422,"y":1.8677781820297241},{"x":1.4000005722045898,"y":1.9600015878677368},{"x":1.4333338737487793,"y":2.05444598197937},{"x":1.4666671752929688,"y":2.1511125564575195},{"x":1.5000004768371582,"y":2.2500014305114746},{"x":1.5333337783813477,"y":2.3511123657226562},{"x":1.566667079925537,"y":2.4544458389282227},{"x":1.6000003814697266,"y":2.5600011348724365},{"x":1.633333683013916,"y":2.667778968811035},{"x":1.6666669845581055,"y":2.7777788639068604},{"x":1.700000286102295,"y":2.890001058578491},{"x":1.7333335876464844,"y":3.0044453144073486},{"x":1.7666668891906738,"y":3.1211118698120117},{"x":1.8000001907348633,"y":3.2400007247924805},{"x":1.8333334922790527,"y":3.361111640930176},{"x":1.8666667938232422,"y":3.4844448566436768},{"x":1.9000005722045898,"y":3.610002279281616},{"x":1.9333338737487793,"y":3.7377798557281494},{"x":1.9666671752929688,"y":3.8677797317504883},{"x":2.000000476837158,"y":4.000001907348633},{"x":2.0333337783813477,"y":4.134446144104004},{"x":2.066667079925537,"y":4.27111291885376},{"x":2.1000003814697266,"y":4.410001754760742},{"x":2.133333683013916,"y":4.551112651824951},{"x":2.1666669845581055,"y":4.694445610046387},{"x":2.200000286102295,"y":4.840001106262207},{"x":2.2333335876464844,"y":4.987779140472412},{"x":2.266666889190674,"y":5.1377787590026855},{"x":2.3000001907348633,"y":5.290000915527344},{"x":2.3333334922790527,"y":5.4444451332092285},{"x":2.3666672706604004,"y":5.601113796234131},{"x":2.40000057220459,"y":5.760002613067627},{"x":2.4333338737487793,"y":5.921113967895508},{"x":2.4666671752929688,"y":6.084446907043457},{"x":2.500000476837158,"y":6.250002384185791},{"x":2.5333337783813477,"y":6.417779922485352},{"x":2.566667079925537,"y":6.587779998779297},{"x":2.6000003814697266,"y":6.760002136230469},{"x":2.633333683013916,"y":6.934446334838867},{"x":2.6666669845581055,"y":7.111112594604492},{"x":2.700000286102295,"y":7.290001392364502},{"x":2.7333335876464844,"y":7.4711127281188965},{"x":2.766666889190674,"y":7.654445648193359},{"x":2.8000001907348633,"y":7.840001106262207},{"x":2.833333969116211,"y":8.02778148651123},{"x":2.8666672706604004,"y":8.217781066894531},{"x":2.90000057220459,"y":8.410003662109375},{"x":2.9333338737487793,"y":8.604447364807129},{"x":2.9666671752929688,"y":8.801114082336426},{"x":3.0,"y":9.0},{"x":3.0333337783813477,"y":9.2011137008667},{"x":3.0666675567626953,"y":9.404449462890625},{"x":3.1000003814697266,"y":9.610002517700195},{"x":3.133334159851074,"y":9.81778335571289},{"x":3.1666669845581055,"y":10.027779579162598},{"x":3.200000762939453,"y":10.240004539489746},{"x":3.2333335876464844,"y":10.454445838928223},{"x":3.266667366027832,"y":10.67111587524414},{"x":3.3000001907348633,"y":10.89000129699707},{"x":3.333333969116211,"y":11.111115455627441},{"x":3.366666793823242,"y":11.334444999694824},{"x":3.40000057220459,"y":11.560004234313965},{"x":3.433333396911621,"y":11.7877779006958},{"x":3.4666671752929688,"y":12.017781257629395},{"x":3.5,"y":12.25},{"x":3.5333337783813477,"y":12.484447479248047},{"x":3.5666675567626953,"y":12.72111701965332},{"x":3.6000003814697266,"y":12.960002899169922},{"x":3.633334159851074,"y":13.201117515563965},{"x":3.6666669845581055,"y":13.444446563720703},{"x":3.700000762939453,"y":13.6900053024292},{"x":3.7333335876464844,"y":13.937779426574707},{"x":3.766667366027832,"y":14.187783241271973},{"x":3.8000001907348633,"y":14.440001487731934},{"x":3.833333969116211,"y":14.694449424743652},{"x":3.866666793823242,"y":14.951111793518066},{"x":3.90000057220459,"y":15.210004806518555},{"x":3.933333396911621,"y":15.471111297607422},{"x":3.9666671752929688,"y":15.734448432922363},{"x":4.0,"y":16.0},{"x":4.033333778381348,"y":16.26778221130371},{"x":4.066667556762695,"y":16.537784576416016},{"x":4.100000381469727,"y":16.81000328063965},{"x":4.133334159851074,"y":17.08445167541504},{"x":4.1666669845581055,"y":17.361114501953125},{"x":4.200000762939453,"y":17.64000701904297},{"x":4.233333587646484,"y":17.921113967895508},{"x":4.266667366027832,"y":18.204450607299805},{"x":4.300000190734863,"y":18.490001678466797},{"x":4.333333969116211,"y":18.777782440185547},{"x":4.366666793823242,"y":19.067779541015625},{"x":4.40000057220459,"y":19.360004425048828},{"x":4.433333396911621,"y":19.65444564819336},{"x":4.466667175292969,"y":19.95111656188965},{"x":4.500000953674316,"y":20.250009536743164},{"x":4.533333778381348,"y":20.551115036010742},{"x":4.566667556762695,"y":20.85445213317871},{"x":4.600000381469727,"y":21.160003662109375},{"x":4.633334159851074,"y":21.467784881591797},{"x":4.6666669845581055,"y":21.777780532836914},{"x":4.700000762939453,"y":22.090007781982422},{"x":4.733333587646484,"y":22.404447555541992},{"x":4.766667366027832,"y":22.72111701965332},{"x":4.800000190734863,"y":23.040000915527344},{"x":4.833333969116211,"y":23.361116409301758},{"x":4.866666793823242,"y":23.684446334838867},{"x":4.90000057220459,"y":24.010005950927734},{"x":4.933333396911621,"y":24.337778091430664},{"x":4.966667175292969,"y":24.667783737182617}]},"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"height":200,"mark":"line","width":400}
```

## 複数の線を表示する

```elixir
# np.linspace(-5, 5, 300)
x = Nx.iota({1, 300}) |> Nx.multiply(10 / 300) |> Nx.subtract(5)
y = Nx.power(x, 2)

Vl.new(width: 400, height: 200)
|> Vl.data_from_values(x: Nx.to_flat_list(x), y: Nx.to_flat_list(y))
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```
